# -*- coding: utf-8 -*-
import imaplib
import email
from email.header import decode_header
import asyncio
import re
from telegram import Bot

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

BOT_TOKEN = "–í–ê–®-–¢–û–ö–ï–ù"
TELEGRAM_USER_ID = 123456789
EMAIL_ADDRESS = "example@gmail.com"
EMAIL_PASSWORD = "–í–ê–®-–í–ù–ï–®–ù–ò–ô –ü–ê–†–û–õ–¨"
IMAP_SERVER = "imap.gmail.com"

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def decode_mime_words(s):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º—É –ø–∏—Å—å–º–∞)"""
    if not s:
        return ""
    decoded = decode_header(s)
    fragments = []
    for text, charset in decoded:
        if isinstance(text, bytes):
            try:
                fragments.append(text.decode(charset or "utf-8"))
            except Exception:
                fragments.append(text.decode("utf-8", errors="ignore"))
        else:
            fragments.append(text)
    return "".join(fragments)


def html_to_text(html):
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    clean = re.sub(r"<(script|style).*?>.*?</\1>", "", html, flags=re.DOTALL)
    clean = re.sub(r"<[^>]+>", "", clean)
    clean = re.sub(r"\s+", " ", clean)
    return clean.strip()


# === –ü–†–û–í–ï–†–ö–ê –ü–û–ß–¢–´ ===

async def check_email(bot, last_uid):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞"""
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
    mail.select("inbox")

    result, data = mail.uid("search", None, "ALL")
    uids = data[0].split()

    if uids and uids[-1] != last_uid:
        result, data = mail.uid("fetch", uids[-1], "(RFC822)")
        raw_email = data[0][1]
        msg = email.message_from_bytes(raw_email)

        subject = decode_mime_words(msg["Subject"])
        sender = decode_mime_words(msg["From"])

        body = ""
        text_found = False  # —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç

        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))

                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º text/plain
                if content_type == "text/plain" and "attachment" not in content_disposition:
                    try:
                        body_bytes = part.get_payload(decode=True)
                        charset = part.get_content_charset() or "utf-8"
                        body = body_bytes.decode(charset, errors="ignore")
                        text_found = True
                        break
                    except Exception:
                        pass

                # –ï—Å–ª–∏ –Ω–µ—Ç text/plain ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º text/html
                elif not text_found and content_type == "text/html":
                    try:
                        body_bytes = part.get_payload(decode=True)
                        charset = part.get_content_charset() or "utf-8"
                        html_content = body_bytes.decode(charset, errors="ignore")
                        body = html_to_text(html_content)
                    except Exception:
                        pass
        else:
            body_bytes = msg.get_payload(decode=True)
            charset = msg.get_content_charset() or "utf-8"
            raw_body = body_bytes.decode(charset, errors="ignore")
            if msg.get_content_type() == "text/html":
                body = html_to_text(raw_body)
            else:
                body = raw_body

        if len(body) > 3500:
            body = body[:3500] + "\n\n(—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

        text = f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!\n–û—Ç: {sender}\n–¢–µ–º–∞: {subject}\n\n{body}"
        await bot.send_message(chat_id=TELEGRAM_USER_ID, text=text)
        return uids[-1]

    return last_uid


def get_last_uid_on_start():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
    mail.select("inbox")
    result, data = mail.uid("search", None, "ALL")
    uids = data[0].split()
    if uids:
        return uids[-1]
    return None


# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===

async def main():
    bot = Bot(token=BOT_TOKEN)
    last_uid = get_last_uid_on_start()
    while True:
        try:
            last_uid = await check_email(bot, last_uid)
        except Exception as e:
            print("–û—à–∏–±–∫–∞:", e)
        await asyncio.sleep(60)


if __name__ == "__main__":
    asyncio.run(main())

