# -*- coding: utf-8 -*-
import imaplib
import email
from email.header import decode_header
import asyncio
from telegram import Bot

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ 
BOT_TOKEN = "–í–ê–®-–¢–û–ö–ï–ù"

# –¢–≤–æ–π Telegram ID
TELEGRAM_USER_ID = 123456789

# –ü–æ—á—Ç–∞ Gmail –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
EMAIL_ADDRESS = "example@gmail.com"
EMAIL_PASSWORD = "–í–ê–®-–ü–ê–†–û–õ–¨-–î–õ–Ø-–ü–†–ò–õ–û–ñ–ï–ù–ò–ô"

IMAP_SERVER = "imap.gmail.com"

# === –§–£–ù–ö–¶–ò–Ø –î–ï–ö–û–î–ò–†–û–í–ê–ù–ò–Ø MIME ===
def decode_mime_words(s):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º—É —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)"""
    if not s:
        return ""
    decoded = decode_header(s)
    fragments = []
    for text, charset in decoded:
        if isinstance(text, bytes):
            try:
                fragments.append(text.decode(charset or "utf-8"))
            except Exception:
                fragments.append(text.decode("utf-8", errors="ignore"))
        else:
            fragments.append(text)
    return "".join(fragments)

# === –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–ß–¢–´ ===
async def check_email(bot, last_uid):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –≤ Telegram"""
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
    mail.select("inbox")

    # –ü–æ–ª—É—á–∞–µ–º UID –≤—Å–µ—Ö –ø–∏—Å–µ–º
    result, data = mail.uid("search", None, "ALL")
    uids = data[0].split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    if uids and uids[-1] != last_uid:
        result, data = mail.uid("fetch", uids[-1], "(RFC822)")
        raw_email = data[0][1]
        msg = email.message_from_bytes(raw_email)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        subject = decode_mime_words(msg["Subject"])
        sender = decode_mime_words(msg["From"])

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))
                if content_type == "text/plain" and "attachment" not in content_disposition:
                    try:
                        body_bytes = part.get_payload(decode=True)
                        charset = part.get_content_charset() or "utf-8"
                        body = body_bytes.decode(charset, errors="ignore")
                        break
                    except Exception:
                        pass
        else:
            body_bytes = msg.get_payload(decode=True)
            charset = msg.get_content_charset() or "utf-8"
            body = body_bytes.decode(charset, errors="ignore")

        if len(body) > 3500:
            body = body[:3500] + "\n\n(—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text = f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!\n–û—Ç: {sender}\n–¢–µ–º–∞: {subject}\n\n{body}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ
        await bot.send_message(chat_id=TELEGRAM_USER_ID, text=text)

        return uids[-1]
    else:
        return last_uid

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û UID –ü–†–ò –°–¢–ê–†–¢–ï ===
def get_last_uid_on_start():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
    mail.select("inbox")
    result, data = mail.uid("search", None, "ALL")
    uids = data[0].split()
    if uids:
        return uids[-1]
    return None

# === –ì–õ–ê–í–ù–´–ô –ê–°–ò–ù–•–†–û–ù–ù–´–ô –¶–ò–ö–õ ===
async def main():
    bot = Bot(token=BOT_TOKEN)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π UID –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∏—Å—å–º–∞
    last_uid = get_last_uid_on_start()

    while True:
        try:
            last_uid = await check_email(bot, last_uid)
        except Exception as e:
            print("–û—à–∏–±–∫–∞:", e)
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
if __name__ == "__main__":
    asyncio.run(main())
